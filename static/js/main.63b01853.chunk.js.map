{"version":3,"sources":["Navbar/navbar.js","config/config.js","FileUpload/fileupload.js","Details/details.js","Layout/layout.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","Link","to","Component","config","url","FileUpload","style","background-color","fileupload","e","preventDefault","formdata","FormData","document","querySelector","$","reset","console","log","axios","post","then","res","swal","catch","err","_this2","this","class","onSubmit","type","id","name","required","DataTable","require","DetailsPage","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","table","width","add","position","bottom","right","height","cursor","sample","data","title","targets","defaultContent","addData","bind","assertThisInitialized","ReloadTableData","destroy","$el","el","get","setState","columns","on","event","row","target","viewData","editData","deleteData","length","slice","html","concat","substring","focusConfirm","preConfirm","fd","datasend","Release Year","Title","Origin/Ethnicity","Director","Cast","Genre","Wiki Page","Plot","put","clear","confirmButtonText","showCancelButton","confirmButtonColor","cancelButtonColor","delete","_this3","ref","onClick","Layout","navbar","Switch","Route","path","exact","component","FileUploadPage","App","layout","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63b01853.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Navbar\">\r\n        <nav className=\"navbar navbar-dark  m-navbar justify-content-between\">\r\n            <Link className=\"navbar-brand\" to=\"/\">CSV-React</Link>\r\n            <Link className=\"btn m-btn offset-sm-9 col-sm-1\" to=\"/\" > Home </Link>\r\n            <Link className=\"btn m-btn  col-sm-1\" to=\"/upload\" > Upload CSV  </Link>\r\n          </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","const config = {\r\n    development: {\r\n        url: 'https://flaskcsv.herokuapp.com/api'\r\n    },\r\n    production: {\r\n        url: ''\r\n    }\r\n}\r\nexport default config.development","import React, { Component } from 'react';\r\nimport config from '../config/config'\r\nimport axios from 'axios'\r\nimport swal from 'sweetalert2/dist/sweetalert2.js'\r\nimport 'sweetalert2/src/sweetalert2.scss'\r\nimport $ from 'jquery'\r\nclass FileUpload extends Component {\r\n    style = {\r\n        \"background-color\" : \"transparent\"\r\n    }\r\n    fileupload = (e) => {\r\n        e.preventDefault()\r\n        let formdata = new FormData(document.querySelector('form'));\r\n        $('form')[0].reset()\r\n        console.log(config)\r\n        axios.post(config.url + \"/upload\", formdata)\r\n            .then((res) => {\r\n                console.log(res)\r\n                swal(\r\n                    'Good job!',\r\n                    'File Upload was successfull',\r\n                    'success'\r\n                )\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n\r\n            <div class=\"container h-100\">\r\n                <div class=\"row align-items-center h-100\">\r\n                    <div class=\"col-6 mx-auto\">\r\n                        <div class=\"jumbotron\" style={this.style}>\r\n                            <form className=\" my-2 border border-white bg-light rounded\" onSubmit={(e) => { this.fileupload(e) }} >\r\n                                <div className=\"form-group  p-5\">\r\n                                    <h3>Upload File</h3>\r\n                                    <input type=\"file\" className=\"form-control-file\" id=\"File\" name=\"file\" required />\r\n                                    <button className=\"btn btn-primary mt-3\" type=\"submit\">Submit</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default FileUpload;\r\n","import React, { Component } from 'react';\r\n\r\nimport $ from 'jquery'\r\nimport axios from 'axios'\r\nimport config from '../config/config'\r\nimport swal from 'sweetalert2/dist/sweetalert2.js'\r\nimport 'sweetalert2/src/sweetalert2.scss'\r\n$.DataTable = require('datatables.net')\r\n\r\n\r\nclass DetailsPage extends Component {\r\n    state = {\r\n        table : ''\r\n    }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.addData = this.addData.bind(this)\r\n    }\r\n    \r\n    style = {\r\n        width: '100%'\r\n    }\r\n\r\n    add = {\r\n        'position': 'fixed',\r\n        'bottom': '60px',\r\n        'right': '60px',\r\n        'width': '20px',\r\n        'height': '20px',\r\n        'cursor': 'pointer'\r\n    }\r\n    sample = [\r\n        { \"data\": \"Release Year\", title: \"Release Year\" },\r\n        { \"data\": \"Title\", title: \"Title\" },\r\n        { \"data\": \"Origin/Ethnicity\", title: \"Origin/Ethnicity\" },\r\n        { \"data\": \"Director\", title: \"Director\" },\r\n        // { \"data\": \"Cast\", title: \"Cast\" },\r\n        { \"data\": \"Genre\", title: \"Genre\" },\r\n        {\r\n            \"className\": \"min_height\",\r\n            \"targets\": -1,\r\n            \"data\": null,\r\n            \"defaultContent\":\r\n                '<a class=\"btn-view btn\" > <i class=\"fas fa-eye\"></i> </a>'\r\n                + '<a class=\"btn-edit btn\" > <i title=\"edit\" class=\"fas fa-edit\"></i> </a>'\r\n                + '<a class=\"btn-delete btn\"> <i title=\"edit\" class=\"fas fa-trash\"></i> </a>',\r\n            title: \"Action\"\r\n        }\r\n    ]\r\n\r\n    componentDidMount() {\r\n        this.ReloadTableData() \r\n    }\r\n\r\n    componentWillUnmount() {\r\n       $('#DataTable').DataTable().destroy()\r\n        // this.$el.DataTable.destroy(true)\r\n     \r\n    }\r\n\r\n \r\n    ReloadTableData(){\r\n        this.$el = $(this.el)\r\n        let _this = this\r\n        axios.get(config.url + '/data')\r\n            .then(res => {\r\n                console.log(res.data)\r\n               \r\n                _this.setState({ table: this.$el.DataTable({\r\n                    data: res.data,\r\n                    columns: this.sample\r\n                    })\r\n                })\r\n\r\n                this.$el.on('click', 'tr', function (event) {\r\n                    var data = _this.state.table.row(this).data();\r\n                    if (event.target.className === \"fas fa-eye\") {\r\n                        _this.viewData(data)\r\n                        console.log(data)\r\n                        \r\n                    }\r\n                    if (event.target.className === \"fas fa-edit\") {\r\n                        _this.editData(data)\r\n                        console.log(data)\r\n                    }\r\n                    if (event.target.className === \"fas fa-trash\") {\r\n                        _this.deleteData(data)\r\n                        console.log(data)\r\n                    }\r\n\r\n                });\r\n\r\n            })\r\n\r\n    }\r\n\r\n    async viewData(data) {\r\n        console.log(data['Plot'].length > 50 ? data['Plot'].slice(50) : data['Plot'])\r\n        await swal({\r\n            title: 'Details',\r\n            html:\r\n            `<table> <tr> <td> <b>Release Year:  </b> </td > <td>${data['Release Year']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Title: </b> </td > <td>${data['Title']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Origin/Ethnicity: </b> </td > <td>${data['Origin/Ethnicity']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Director: </b> </td > <td>${data['Director']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Cast: </b> </td > <td>${data['Cast']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Genre: </b> </td > <td>${data['Genre']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Wiki Page: </b> </td >  </tr>` +\r\n            `<table> <tr><td>${data['Wiki Page']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Plot:</b> </td ></tr>` +\r\n            `<table> <tr> <td>${ data['Plot'].length > 50 ? data['Plot'].substring(0,50) : data['Plot']}</td> </tr>`,\r\n            focusConfirm: false,\r\n            preConfirm: () => {\r\n              return;\r\n            }\r\n          })\r\n          \r\n    }\r\n\r\n    async editData(data) {\r\n        var _this = this\r\n        await swal({\r\n            title: 'Edit Details',\r\n            html:\r\n              `<form><input name=\"Release Year\" id=\"swal-input1\" value=\"${data['Release Year']}\" class=\"swal2-input\">` +\r\n              `<input name=\"Title\" id=\"swal-input2\" value=\"${data['Title']}\" class=\"swal2-input\">` +\r\n              `<input name=\"Origin/Ethnicity\" id=\"swal-input2\" value=\"${data['Origin/Ethnicity']}\" class=\"swal2-input\">` +\r\n              `<input name=\"Director\" id=\"swal-input2\" value=\"${data['Director']}\" class=\"swal2-input\">` +\r\n              `<input name=\"Cast\" id=\"swal-input2\" value=\"${data['Cast']}\" class=\"swal2-input\">` +\r\n              `<input name=\"Genre\" id=\"swal-input2\" value=\"${data['Genre']}\" class=\"swal2-input\">` +\r\n              `<input name=\"Wiki Page\" id=\"swal-input2\" value=\"${data['Wiki Page']}\" class=\"swal2-input\">` +\r\n              `<textarea id=\"swal-input2\" name=\"Plot\" class=\"swal2-input\">${data['Plot']}</textarea> </form>`\r\n              ,\r\n            focusConfirm: false,\r\n            preConfirm: () => {\r\n                let fd = new FormData(document.querySelector('form'))\r\n                const datasend = {\r\n                    \"Release Year\": fd.get('Release Year'),\r\n                    \"Title\": fd.get(\"Title\"),\r\n                    \"Origin/Ethnicity\": fd.get(\"Origin/Ethnicity\"),\r\n                    \"Director\": fd.get(\"Director\"),\r\n                    \"Cast\": fd.get(\"Cast\"),\r\n                    \"Genre\": fd.get(\"Genre\"),\r\n                    \"Wiki Page\": fd.get(\"Wiki Page\"),\r\n                    \"Plot\": fd.get(\"Plot\")\r\n                }\r\n                axios.put(config.url + `/data/${data['_id']['$oid']}`, datasend ).then( res => {\r\n                   let table = $('#DataTable').DataTable()\r\n                   table.clear()\r\n                   table.destroy()\r\n                   _this.ReloadTableData()\r\n\r\n                    return swal(\r\n                        'Good job!',\r\n                        'Record updated successfully',\r\n                        'success'\r\n                        )\r\n                    })\r\n                    .catch(err => {\r\n                        return swal(\r\n                            'Try Again!',\r\n                            'Cannot update the record',\r\n                            'error'\r\n                            ) \r\n                    })\r\n                }\r\n            })\r\n          \r\n    }\r\n\r\n    async deleteData (data) {\r\n        let _this = this\r\n        await swal({\r\n            title: 'Attention!!!',\r\n            html:\r\n             `<table> <tr> <td> <b>Release Year:  </b> </td > <td>${data['Release Year']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Title: </b> </td > <td>${data['Title']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Origin/Ethnicity: </b> </td > <td>${data['Origin/Ethnicity']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Director: </b> </td > <td>${data['Director']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Cast: </b> </td > <td>${data['Cast']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Genre: </b> </td > <td>${data['Genre']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Wiki Page: </b> </td >  </tr>` +\r\n            `<table> <tr><td>${data['Wiki Page']}</td> </tr>` +\r\n            `<table> <tr> <td> <b>Plot:</b> </td ></tr>` +\r\n            `<table> <tr> <td>${ data['Plot'].length > 50 ? data['Plot'].substring(0,50) : data['Plot']}</td> </tr>`,\r\n            focusConfirm: false,\r\n            confirmButtonText: 'Yes, Delete it',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            preConfirm: () => {\r\n                axios.delete(config.url + `/data/${data['_id']['$oid']}`).then( res => {\r\n                    let table = $('#DataTable').DataTable()\r\n                    table.clear()\r\n                    table.destroy()\r\n                    _this.ReloadTableData()\r\n\r\n                    return swal(\r\n                        'Success!',\r\n                        'Record Deleted successfully',\r\n                        'success'\r\n                        )\r\n                    })\r\n                    .catch(err => {\r\n                        return swal(\r\n                            'Try Again!',\r\n                            'Cannot update the record',\r\n                            'error'\r\n                            ) \r\n                    })\r\n            }\r\n          })\r\n\r\n    }\r\n\r\n    async addData(){\r\n        var _this = this\r\n        await swal({\r\n            title: 'Edit Details',\r\n            html:\r\n              `<form><input name=\"Release Year\"  placeholder=\"Enter Release Year\"  id=\"swal-input1\"  class=\"swal2-input\">` +\r\n              `<input name=\"Title\"  placeholder=\"Enter Title\"  id=\"swal-input2\"  class=\"swal2-input\">` +\r\n              `<input name=\"Origin/Ethnicity\"  placeholder=\"Enter Origin/Ethnicity\"  id=\"swal-input2\"  class=\"swal2-input\">` +\r\n              `<input name=\"Director\"  placeholder=\"Enter Director\"  id=\"swal-input2\"  class=\"swal2-input\">` +\r\n              `<input name=\"Cast\"  placeholder=\"Enter Cast\"  id=\"swal-input2\"  class=\"swal2-input\">` +\r\n              `<input name=\"Genre\"  placeholder=\"Enter Genre\"  id=\"swal-input2\"  class=\"swal2-input\">` +\r\n              `<input name=\"Wiki Page\"  placeholder=\"Enter Wiki Page\"  id=\"swal-input2\"  class=\"swal2-input\">` +\r\n              `<label>Enter Plot</label>`+\r\n              `<textarea id=\"swal-input2\" name=\"Plot\" class=\"swal2-input\"></textarea> </form>`\r\n              ,\r\n            focusConfirm: false,\r\n            preConfirm: () => {\r\n                let fd = new FormData(document.querySelector('form'))\r\n                const datasend = {\r\n                    \"Release Year\": fd.get('Release Year'),\r\n                    \"Title\": fd.get(\"Title\"),\r\n                    \"Origin/Ethnicity\": fd.get(\"Origin/Ethnicity\"),\r\n                    \"Director\": fd.get(\"Director\"),\r\n                    \"Cast\": fd.get(\"Cast\"),\r\n                    \"Genre\": fd.get(\"Genre\"),\r\n                    \"Wiki Page\": fd.get(\"Wiki Page\"),\r\n                    \"Plot\": fd.get(\"Plot\")\r\n                }\r\n                axios.post(config.url + `/data`, datasend ).then( res => {\r\n                   let table = $('#DataTable').DataTable()\r\n                   table.clear()\r\n                   table.destroy()\r\n                   _this.ReloadTableData()\r\n\r\n                    return swal(\r\n                        'Good job!',\r\n                        'Record inserted successfully',\r\n                        'success'\r\n                        )\r\n                    })\r\n                    .catch(err => {\r\n                        return swal(\r\n                            'Try Again!',\r\n                            'Cannot insert the record',\r\n                            'error'\r\n                            ) \r\n                    })\r\n                }\r\n            })\r\n          \r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container p-3\">\r\n                <table id=\"DataTable\" className=\"table table-striped table-bordered\" style={this.style}\r\n                    ref={el => this.el = el}></table>\r\n                    <a style={this.add} onClick={this.addData} ><i class=\"fas fa-plus-circle fa-4x\"   ></i></a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DetailsPage;\r\n","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Navbar from \"../Navbar/navbar\";\r\nimport FileUploadPage from \"../FileUpload/fileupload\";\r\nimport DetailsPage from \"../Details/details\";\r\n\r\nclass Layout extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Layout\">\r\n                <Navbar></Navbar>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={DetailsPage} />\r\n                    <Route path=\"/upload\" component={FileUploadPage} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;\r\n","import React, { Component } from 'react';\r\nimport Layout from \"./Layout/layout\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Layout></Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter } from 'react-router-dom'\r\n\r\n\r\nconst Router = () => (\r\n    <BrowserRouter>\r\n    <App />\r\n    </BrowserRouter>\r\n)\r\n\r\nReactDOM.render(<Router />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}